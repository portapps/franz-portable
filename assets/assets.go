// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/Franz.lnk (2.371kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _franzLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x6f\x68\x5b\xd5\x1b\xc7\x3f\xb7\x7f\x18\xdd\x5e\xac\xfb\xfd\xca\xd4\x52\x69\x50\x5b\x26\x9a\x4b\xda\x25\x6d\x93\x29\xb6\xe6\x4f\x53\x9b\xae\x31\x59\xb4\x1b\xd7\xe2\x25\xbd\x4d\x4b\x9a\x26\xbb\xc9\xb0\x89\xa2\x74\xa0\xb3\xc3\x29\x38\xfc\x33\x7d\xd1\x0e\x84\x55\xd0\xa2\x22\x0a\x6e\x8e\xbe\xb0\x08\xa2\x43\xb1\x7d\x53\xa1\x65\x03\x05\x45\x57\xd8\x10\xa7\x8e\x21\xe7\x24\x8d\x69\x2c\x28\xa8\x20\xe2\x03\xc9\xf9\xf7\x9c\xcf\xf3\xbd\xcf\x73\xee\x3d\x01\x40\xa9\xab\x40\xd8\xbc\xfc\xc7\xb7\xda\x09\x16\x60\xf6\xca\x43\x5b\x97\xab\x97\x94\x95\xe5\xc1\x6d\xa2\x65\xc7\xd3\x57\x26\x7f\x5e\x54\x9e\x6c\x7f\xa9\x5a\x38\x2a\x6c\xb4\xba\x0a\x17\x8d\x9e\xee\xfa\xca\xfd\xe6\x5d\xa7\x3c\x53\x0b\x91\xe7\xae\xc5\x6d\x17\x9b\x51\x68\x66\xed\x6c\x2d\xe0\xba\x56\xad\x5e\x78\x7c\x51\xb9\xf4\xc1\xc8\xb7\x2b\xca\x52\xb1\xad\xe3\x30\x19\x1a\x70\xfb\xc2\xbe\x9d\xb4\x48\x5a\xae\x6f\xfe\xfd\xff\xd1\x95\x4a\x79\xf4\x8c\x0e\x64\xea\xf7\x0f\x3e\xbf\xfa\xb9\xff\x58\xec\xba\xdd\x67\x2e\xee\x7a\x6f\xe1\x93\x9f\x56\xa7\x63\xf7\x75\x4d\x75\x2f\x7c\x18\x9f\x7f\xe7\xb1\x4e\x6a\xa8\x62\xed\xac\xd8\x27\x7e\x2a\xe0\xed\x17\x1a\x2b\xcb\x74\xbe\xfb\x72\x8d\xd2\x45\x8a\x14\x1e\x74\x32\x08\xfa\xdd\x04\x0b\x71\x67\xf7\x76\x9f\xac\x25\x90\x8c\xea\x63\xdc\x51\xc2\x14\xf3\x82\x39\xb0\x29\x73\x70\x4f\x9c\x00\x49\xa2\xe8\x8c\x89\x5c\x70\xa0\xc8\xf3\x9e\xac\x25\x68\x26\x63\xa6\x9e\x48\x8b\x48\x79\xe6\xc3\x7d\x7b\xde\x10\x6b\x82\x69\xbf\x57\x78\x56\x94\xe7\xf3\xab\x0a\x25\x88\x49\x92\x18\x26\x3a\x09\xd2\xc0\xf5\x65\x4a\x87\x4d\x7d\x3c\x57\x54\x2a\x88\xeb\x4a\xbf\x79\x40\x10\x6b\xcb\xa8\xee\xc3\x37\x31\x2c\x79\xe3\xe4\xa4\x52\x8d\x56\x44\x4d\x4f\xec\xfd\x6c\xd2\x82\x4f\xf0\x54\x63\xc2\xc0\x53\x64\xfa\x8a\xcc\xed\xdf\x8b\xd2\x57\xf3\x5b\xf3\x15\x99\x2a\x06\x13\x18\x52\x2b\x32\x1b\x0d\x85\xd3\x22\x5a\x47\xc1\x3f\x0e\xdc\x50\xc8\xa4\xfb\x74\x83\x26\x74\x7a\x46\x6f\x39\x78\xc8\xb0\xb8\x71\xbb\xb4\x48\xda\x30\xd3\x5a\xd4\xd4\x73\x59\xad\x70\x0a\x34\x59\x15\x6d\x3d\x97\x9a\x7c\x74\xed\x57\xc1\x84\xe8\xc3\x20\x4d\x1a\x9d\x18\xa3\x8c\x13\xc3\x82\x2e\x6b\x6d\x61\x98\x24\x26\x16\xee\x67\x44\xd6\x3d\x4d\xfe\x14\xdc\x8e\x85\x30\x63\xe8\x44\x89\xcb\xd1\x3e\x0c\xc6\x30\x8a\x79\x17\x73\x7e\x46\x49\xe1\x2e\xec\xcd\xcf\xe8\x32\x42\x92\x43\x92\x66\x91\xe3\x21\x2c\x24\x64\x2f\x5b\xd6\x13\xd1\x0d\x54\x6e\x45\x45\x45\x63\xe3\x19\xd4\x4a\xce\x8f\x46\x79\xdd\xb5\x92\x9a\x69\x9b\xe4\xfa\x36\xdc\xb8\xd0\x88\x90\xc6\xc0\x94\x3b\xa2\xd2\x2b\x47\xf6\x4f\xc4\x72\xfc\x4d\xdc\xcd\x9e\xa1\xae\x12\xb6\xc0\x4c\x53\x24\xec\x0d\x05\x43\xfd\xbe\x9e\x80\xb7\xe9\x0f\xd7\xfe\xdf\x65\x4d\x44\x08\xe3\x25\x44\x90\x10\xfd\xf8\xe8\x21\x80\x97\xa6\xbf\x38\xe7\xff\xd9\x3f\xdb\xc4\x17\x73\x1b\xcc\x3c\xb2\xfd\xdc\x65\xa5\xe7\xe3\x7b\x9e\xf0\x2f\x2d\xf6\x56\xad\x3d\xe3\x02\x1e\xcc\x7f\x3d\x67\x06\x0a\xbe\xa9\xa8\x75\x44\x1f\x32\xd2\xeb\x7b\x87\xe6\xe6\x32\xd9\x4b\xaf\x79\x9f\x9d\xfc\xf2\xd5\xe5\xd9\x23\x55\x3f\x84\xaf\x1e\x78\xfb\xe0\xd7\x3b\x4e\x1c\xdf\xf7\x56\xe5\xd6\xa3\x81\xdf\x5b\xbf\x59\x81\x1a\x98\x99\x02\x5a\xc2\xc1\xf0\x85\xa3\x03\xbe\x33\x81\x0e\xf7\xe9\xab\xff\x3f\xde\xfc\x62\xe2\x5c\x02\xa8\x12\x81\x1a\x01\x71\x39\x84\xb1\xd2\x82\x15\x07\x56\x5a\x65\x6f\x37\xed\x38\xb1\x63\xc7\x89\x93\x36\x3a\x68\x93\x6b\x4e\x1c\xd8\xb0\xcb\x71\x2b\x1d\xd2\xd3\x81\x1d\x1b\x36\x5a\x68\x97\x3b\xda\x24\x2d\x3f\x93\xb7\x48\x41\x48\x64\x57\x60\x3a\x3b\xed\xec\x9d\xfd\xf4\xfc\xa2\xf5\xfc\xd2\x65\xe7\xfa\x95\xd4\x28\xef\x33\x88\x92\x24\x81\x4a\x02\x03\x83\x4c\xc9\x3b\xa0\x6e\xb8\xfb\x84\x39\x0b\xd0\x37\x77\x26\x3c\xaf\x1f\x4b\xf9\x4f\xf9\x3b\xd5\x57\xee\x9c\x78\xea\x46\x60\x44\x38\xf8\x81\xd5\x95\xfa\xef\x8e\xfc\xb8\xe6\x7f\x61\xee\x8b\xde\x2d\x1f\x3d\x6a\x2b\x2d\xd1\x2f\x01\x00\x00\xff\xff\x27\xd0\x90\x1e\x43\x09\x00\x00")

func franzLnkBytes() ([]byte, error) {
	return bindataRead(
		_franzLnk,
		"Franz.lnk",
	)
}

func franzLnk() (*asset, error) {
	bytes, err := franzLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Franz.lnk", size: 2371, mode: os.FileMode(0666), modTime: time.Unix(1557346214, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x20, 0xa4, 0x6, 0x39, 0x2c, 0x53, 0xf9, 0x4a, 0x54, 0x22, 0x3d, 0x9a, 0x78, 0x61, 0xb0, 0x38, 0x9b, 0x68, 0xb, 0x62, 0xdb, 0xc, 0xfb, 0xeb, 0x90, 0x2c, 0x79, 0x77, 0xc6, 0xd6, 0x67, 0x80}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Franz.lnk": franzLnk,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Franz.lnk": {franzLnk, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
